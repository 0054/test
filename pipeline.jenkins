#!groovy
properties([disableConcurrentBuilds()])
void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/0054/test"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
    agent {
        label 'master'
    }
    options {
        timestamps()
    }
    post {
        success {
            setBuildStatus("Build succeeded", "SUCCESS");
        }
        failure {
            setBuildStatus("Build failed", "FAILURE");
        }
    }
    stages {
        stage ('Get latest code') {
            steps {
                checkout scm
            }
        }
        stage ('run tests') {
            steps {
                sh '''
                    /usr/local/bin/virtualenv .venv
                    . .venv/bin/activate
                    pip install -r requirements.txt
                    py.test
                '''
            }
        }
        stage ('build') {
            steps {
                sh '''
                    ssh amsterdam rm -rf /tmp/build/ || true
                    ssh amsterdam mkdir /tmp/build || true
                    ssh amsterdam git clone https://github.com/0054/test.git /tmp/build
                    ssh amsterdam bash /tmp/build/build.sh
                    '''
            }
        }
        stage('deploy') {
            steps {
                sh '''
                    ssh amsterdam docker stop api || true
                    ssh amsterdam docker rm api || true
                    ssh amsterdam docker run -d -p 5000:5000 --name api flask_app
                    '''
            }
        }
    }
}
